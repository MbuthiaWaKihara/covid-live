{"version":3,"sources":["images/world.gif","components/Title.js","components/SingleWorldData.js","components/WorldInfo.js","redux/world/worldActions.js","redux/world/worldTypes.js","components/WorldScreen.js","components/SearchCountry.js","components/Home.js","redux/countries/countriesActions.js","redux/countries/countriesTypes.js","components/CountryData.js","components/Country.js","redux/country/countryActions.js","redux/country/countryTypes.js","redux/world/worldReducer.js","redux/countries/countriesReducer.js","redux/country/countryReducer.js","redux/rootReducer.js","redux/store.js","components/App.js","index.js"],"names":["module","exports","React","memo","smallScreen","useContext","ScreenContext","style","width","height","margin","display","flexDirection","src","World","alt","marginRight","marginTop","color","fontWeight","fontSize","container","caption","figure","useCountUp","end","duration","startOnMount","countUp","update","start","pauseResume","reset","useEffect","textAlign","flexWrap","connect","state","worldState","world","dispatch","fetchWorlddata","type","axios","get","then","response","payload","data","catch","error","fetchWorlddataError","finally","props","updateReference","useRef","current","setInterval","clearInterval","isLoading","Loader","backdrop","size","center","worldData","cases","todayCases","deaths","todayDeaths","active","recovered","flagStyle","heigth","flagsUrls","countriesState","countriesData","length","map","country","countryInfo","flag","displayFlags","flagIndex","Fragment","key","Whisper","placement","trigger","speaker","Tooltip","to","overflow","currentCountry","setCurrentCountry","searchText","setSearchText","setShowSearch","text","onClick","Icon","icon","InputGroup","inside","marginBottom","Input","placeholder","value","onChange","newSearchText","forEach","countryIndex","Button","appearance","countryName","country_name","countryCode","country_code","countryCode3","country_code_iso3","iso2","iso3","console","log","countries","fetchCountries","fetchCountriesError","useState","showSearch","wrapper","flags","onFocus","countryState","ownProps","fetchCountry","match","params","fetchCountryError","titleContent","countryData","lat","long","casesPerOneMillion","deathsPerOneMillion","tests","position","bottom","borderRadius","initialWorldState","worldReducer","action","initialCountriesState","countriesReducer","initialCountryState","countryReducer","rootReducer","combineReducers","thunkMiddleware","require","default","store","createStore","applyMiddleware","judgeScreenSize","createContext","window","innerWidth","setWidth","innerHeight","setHeight","setSmallScreen","handleResize","addEventListener","removeEventListener","Provider","Container","Header","Content","path","exact","render","rootNode","document","querySelector","ReactDOM"],"mappings":"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","file":"static/js/main.276f71fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/world.263dad67.gif\";","import React from 'react';\r\nimport World from '../images/world.gif';\r\nimport {ScreenContext} from './App';\r\n\r\nconst Title = () => {\r\n    const smallScreen = React.useContext(ScreenContext);\r\n    return (\r\n        <>\r\n            <div\r\n            style={{\r\n                width: '100%',\r\n                height: '100%',\r\n            }}\r\n            >\r\n                <div style={{\r\n                    height: '100%',\r\n                    width: smallScreen ? '50%' : '35%',\r\n                    margin: 'auto',\r\n                    display: 'flex',\r\n                    flexDirection: 'row',\r\n                }}>\r\n                <img\r\n                src={World} alt=\"world\"\r\n                style={{\r\n                    marginRight: '10px',\r\n                    height: smallScreen ? '50%' : '60%',\r\n                    marginTop: smallScreen ? '8%' : null,\r\n                }}\r\n                />\r\n                <h1\r\n                style={{\r\n                    color: '#690000',\r\n                    fontWeight: 'bolder',\r\n                    fontSize: smallScreen ? '1.3em' : null,\r\n                    marginTop: smallScreen ? '3%' : null,\r\n                }}\r\n                >COVID LIVE</h1>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(Title);\r\n","import React, {\r\n    useEffect,\r\n} from 'react';\r\nimport { useCountUp } from 'react-countup';\r\nimport { ScreenContext } from './App';\r\n\r\nconst container = {\r\n    width: '50%',\r\n    height: '33.33%',\r\n}\r\nconst SingleWorldData = ({caption, figure}) => {\r\n    const smallScreen = React.useContext(ScreenContext);\r\n    const { countUp, start, pauseResume, reset, update } = useCountUp({\r\n        end: figure,\r\n        duration: 10,\r\n        startOnMount: true,\r\n      });\r\n\r\n    useEffect(() => {\r\n        update(figure);\r\n    }, [figure])\r\n    return (\r\n        <>\r\n            <div\r\n            style={container}\r\n            >\r\n                <h3 \r\n                style={{\r\n                    textAlign: 'center',\r\n                    // color: '#690000',\r\n                    fontWeight: 'bolder',\r\n                    fontSize: smallScreen ? '.9em' : null,\r\n                }}\r\n                >\r\n                    {caption} : {countUp}\r\n                </h3>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(SingleWorldData);\r\n","import React, {\r\n    useEffect,\r\n    useRef,\r\n} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    fetchWorlddata,\r\n} from '../redux';\r\nimport SingleData from './SingleWorldData';\r\nimport {\r\nLoader,\r\n} from 'rsuite';\r\n\r\nconst container = {\r\n    width: '100%',\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return({\r\n        worldState: state.world,\r\n    });\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return({\r\n        fetchWorlddata: () => dispatch(fetchWorlddata()),\r\n    })\r\n}\r\n\r\nconst WorldInfo = (props) => {\r\n    //a ref variable to ensure we do not set interval multiple times\r\n    const updateReference = useRef();\r\n\r\n    useEffect(() => {\r\n        props.fetchWorlddata();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // console.log(\"world state: \", props.worldState);\r\n        if(!updateReference.current){\r\n            updateReference.current = setInterval(() => {\r\n                props.fetchWorlddata();\r\n            }, 120000);\r\n        }\r\n        \r\n        return(() => {\r\n            if(updateReference.current) clearInterval(updateReference.current)\r\n        });\r\n    }, [props.worldState]);\r\n\r\n    return (\r\n        <>\r\n            <div\r\n            style={container}\r\n            >   \r\n                {\r\n                    props.worldState.isLoading ? \r\n                    <>\r\n                        <div style={{width: '100%', height: '100%'}}>\r\n                        <Loader backdrop size=\"lg\" center/>\r\n                        </div>\r\n                    </>:\r\n                    props.worldState.error !== `` ?\r\n                    props.worldState.error :\r\n                    <>\r\n                    <SingleData \r\n                    caption=\"Total Cases\"\r\n                    figure={props.worldState.worldData.cases}\r\n                    />\r\n                    <SingleData \r\n                    caption=\"Cases Today\"\r\n                    figure={props.worldState.worldData.todayCases}\r\n                    />\r\n                    <SingleData\r\n                    caption=\"Total Deaths\" \r\n                    figure={props.worldState.worldData.deaths}\r\n                    />\r\n                    <SingleData \r\n                    caption=\"Deaths Today\"\r\n                    figure={props.worldState.worldData.todayDeaths}\r\n                    />\r\n                    <SingleData \r\n                    caption=\"Active\"\r\n                    figure={props.worldState.worldData.active}\r\n                    />\r\n                    <SingleData \r\n                    figure={props.worldState.worldData.recovered}\r\n                    caption=\"Recovered\"\r\n                    /> \r\n                    </>\r\n                    \r\n                }\r\n            </div> \r\n        </>\r\n    )\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(React.memo(WorldInfo));\r\n","import {\r\n    FETCH_WORLDDATA_ERROR,\r\n    FETCH_WORLDDATA_REQUEST,\r\n    FETCH_WORLDDATA_SUCCESS,\r\n} from './worldTypes';\r\nimport axios from 'axios';\r\n\r\nexport const fetchWorlddataRequest = () => {\r\n    return({\r\n        type: FETCH_WORLDDATA_REQUEST,\r\n    });\r\n}\r\n\r\nexport const fetchWorlddataSuccess = worldData => {\r\n    return({\r\n        type: FETCH_WORLDDATA_SUCCESS,\r\n        payload: worldData.data,\r\n    });\r\n}\r\n\r\nexport const fetchWorlddataError = error => {\r\n    return({\r\n        type: FETCH_WORLDDATA_ERROR,\r\n        payload: error,\r\n    });\r\n}\r\n\r\nexport const fetchWorlddata = () => {\r\n    return (\r\n        (dispatch) => {\r\n            dispatch(fetchWorlddataRequest());\r\n            axios\r\n            .get(`https://corona.lmao.ninja/v2/all`)\r\n            .then(response => {\r\n                dispatch(fetchWorlddataSuccess(response));\r\n            })\r\n            .catch( error => {\r\n                dispatch(fetchWorlddataError(error));\r\n            })\r\n            .finally()\r\n        }\r\n    )\r\n}","export const FETCH_WORLDDATA_REQUEST = 'FETCH_WORLDDATA_REQUEST';\r\nexport const FETCH_WORLDDATA_SUCCESS = 'FETCH_WORLDDATA_SUCCESS';\r\nexport const FETCH_WORLDDATA_ERROR = 'FETCH_WORLDDATA_ERROR';\r\n","import React from 'react';\r\nimport {\r\n    Tooltip,\r\n    Whisper,\r\n    Loader,\r\n} from 'rsuite';\r\nimport {\r\n    Link\r\n} from 'react-router-dom';\r\nimport { ScreenContext } from './App';\r\n\r\n\r\n\r\nconst tipMessage = country => {\r\n    return(\r\n        <Tooltip>\r\n            {country}\r\n        </Tooltip>\r\n    )\r\n}\r\nconst WorldScreen = (props) => {\r\n\r\n    const smallScreen = React.useContext(ScreenContext);\r\n\r\n    const container = {\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        flexWrap: 'wrap',\r\n        overflow: 'auto',\r\n    }\r\n    \r\n    const flagStyle = {\r\n        width: smallScreen ? '25%' : '20%',\r\n        heigth: smallScreen ? '25%' : '20%',\r\n    }\r\n\r\n    //we always prepare the countries flags url\r\n    let flagsUrls = null;\r\n    if(props.countriesState.countriesData.length > 0){\r\n        flagsUrls = props.countriesState.countriesData.map(country => country.countryInfo.flag);\r\n    }\r\n\r\n    let displayFlags = null;\r\n    if(flagsUrls && flagsUrls.length > 0){\r\n        displayFlags = flagsUrls.map(\r\n            (flag, flagIndex) => {\r\n                return(\r\n                    <React.Fragment key={flagIndex}>\r\n                        \r\n                        <Whisper\r\n                        placement=\"top\" trigger=\"hover\" speaker={tipMessage(props.countriesState.countriesData[flagIndex].country)}\r\n                        >\r\n                        <div style={flagStyle}>\r\n                        <Link to={`/covid-live/${props.countriesState.countriesData[flagIndex].country}`}>\r\n                        <img src={flag} alt={`${props.countriesState.countriesData[flagIndex].country}'s flag`} style={{width: '90%', height: '90%', margin: 'auto'}}/>\r\n                        </Link>\r\n                        </div>\r\n                        </Whisper>\r\n                        \r\n                    </React.Fragment>\r\n                );\r\n            }\r\n        )\r\n    }\r\n    return (\r\n        <>\r\n            <div\r\n            style={container}\r\n            >\r\n                {\r\n                    props.countriesState.isLoading ? \r\n                    <>\r\n                    <div style={{width: '100%', height: '100%'}}>\r\n                    <Loader backdrop size=\"lg\" center/>\r\n                    </div>\r\n                    </> :\r\n                    props.countriesState.error !== `` ?\r\n                    props.countriesState.error :\r\n                    displayFlags\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(WorldScreen);\r\n","import React from 'react';\r\nimport {\r\n    Input,\r\n    InputGroup,\r\n    Icon,\r\n    Button,\r\n} from 'rsuite';\r\nimport axios from 'axios';\r\nimport { ScreenContext } from './App';\r\n\r\nconst SearchCountry = ({countriesState, currentCountry, setCurrentCountry, searchText, setSearchText, setShowSearch}) => {\r\n\r\n    const smallScreen = React.useContext(ScreenContext);\r\n\r\n    const searchForCountry = newSearchText => {\r\n        setCurrentCountry(null);\r\n        setSearchText(newSearchText);\r\n        countriesState.countriesData.forEach(\r\n            (country, countryIndex) => {\r\n                if(country.country === newSearchText){\r\n                    setCurrentCountry(country);\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    const showThisCountry = () => {\r\n\r\n        axios\r\n        .get('https://ipapi.co/json/')\r\n        .then(response => {\r\n            let countryName = response.data.country_name;\r\n            let countryCode = response.data.country_code;\r\n            let countryCode3 = response.data.country_code_iso3\r\n            countriesState.countriesData.forEach(\r\n                (country, countryIndex) => {\r\n                    if(\r\n                        country.country === countryName\r\n                        || country.countryInfo.iso2 === countryCode\r\n                        || country.countryInfo.iso3 === countryCode3\r\n                    ){\r\n                        setCurrentCountry(country);\r\n                        setSearchText(`${country.country}`)\r\n                    }\r\n                }\r\n            )\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        })\r\n        .finally();\r\n    }\r\n\r\n    const container = {\r\n        // border: '2px solid black',\r\n        width: '100%',\r\n        height: '100%',\r\n    };\r\n    \r\n    const searchbar = {\r\n        width: '100%',\r\n        height: '10%',\r\n    }\r\n    \r\n    const result = {\r\n        width: '100%',\r\n        height: '90%',\r\n    }\r\n    \r\n    const styles = {\r\n        width: '100%',\r\n        marginBottom: 10\r\n     };\r\n\r\n     const text = {\r\n         fontSize: smallScreen ? '1.5em' : null,\r\n     }\r\n\r\n    return (\r\n        <>\r\n            <div\r\n            style={container}\r\n            >\r\n                <div\r\n                style={searchbar}\r\n                >\r\n                    {\r\n                        smallScreen ? \r\n                        <>\r\n                        <div style={{width: '10%', height: '100%', margin: 'auto',}} onClick={() => setShowSearch(false)}>\r\n                        <Icon icon=\"close\"\r\n                        size=\"2x\"\r\n                        />\r\n                        </div>\r\n                        </>\r\n                        :\r\n                        <>\r\n                        <InputGroup inside style={styles}>\r\n                        <Input \r\n                        placeholder=\"Search by country name eg Kenya\"\r\n                        value={searchText}\r\n                        onChange={value => searchForCountry(value)}\r\n                        />\r\n                        <InputGroup.Button>\r\n                            <Icon icon=\"search\" />\r\n                        </InputGroup.Button>\r\n                        </InputGroup>\r\n                        </>\r\n                    }\r\n                </div>\r\n                <div\r\n                style={result}\r\n                >\r\n                {\r\n                    currentCountry ? \r\n                    <>\r\n                    <img \r\n                    src={currentCountry.countryInfo.flag}\r\n                    style={{width: '100%', height: '40%', marginBottom: '3px'}}\r\n                    alt={`${currentCountry.country}'s flag`}\r\n                    />\r\n                    <h3>{currentCountry.country}</h3>\r\n                    <h3 style={text}>Total Cases: {currentCountry.cases}</h3>\r\n                    <h3 style={text}>Cases Today: {currentCountry.todayCases}</h3>\r\n                    <h3 style={text}>Total Deaths: {currentCountry.deaths}</h3>\r\n                    <h3 style={text}>Deaths Today: {currentCountry.todayDeaths}</h3>\r\n                    <h3 style={text}>Active: {currentCountry.active}</h3>\r\n                    <h3 style={text}>Recovered: {currentCountry.recovered}</h3>\r\n                    </> :\r\n                    <>\r\n                    <Button appearance=\"subtle\" style={{width: '100%'}} onClick={showThisCountry}>Show This Country</Button>\r\n                    <h2 style={text}>No results found</h2>\r\n                    <p>Ensure you capitalize first letter eg Uganda</p>\r\n                    <p>Avoid dots in abbreviations eg USA</p>\r\n                    </>\r\n                }\r\n                </div>\r\n            </div> \r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(SearchCountry);\r\n","import React from 'react';\r\nimport {\r\n    Input,\r\n    InputGroup,\r\n    Icon,\r\n} from 'rsuite';\r\nimport WorldInfo from './WorldInfo';\r\nimport WorldScreen from './WorldScreen';\r\nimport SearchCountry from './SearchCountry';\r\nimport {\r\n    fetchCountries,\r\n} from '../redux';\r\nimport { connect } from 'react-redux';\r\nimport { ScreenContext } from './App';\r\n\r\nconst mapStateToProps = state => {\r\n    return({\r\n        countriesState: state.countries,\r\n    });\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return({\r\n        fetchCountries: () => dispatch(fetchCountries()),\r\n    })\r\n}\r\n\r\n\r\nconst Home = (props) => {\r\n    //a ref variable to ensure we do not set interval multiple times\r\n    const updateReference = React.useRef();\r\n\r\n    const [showSearch, setShowSearch] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n        props.fetchCountries();\r\n        \r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        // console.log(\"countries state: \", props.countriesState);\r\n        if(!updateReference.current){\r\n            updateReference.current = setInterval(() => {\r\n                props.fetchCountries();\r\n            }, 120000);\r\n        }\r\n        return(() => {\r\n            if(updateReference.current) clearInterval(updateReference.current)\r\n        });\r\n    }, [props.countriesState]);\r\n\r\n    const [currentCountry, setCurrentCountry] = React.useState(null);\r\n    const [searchText, setSearchText] = React.useState(``);\r\n\r\n    const searchForCountry = newSearchText => {\r\n        setCurrentCountry(null);\r\n        setSearchText(newSearchText);\r\n        props.countriesState.countriesData.forEach(\r\n            (country, countryIndex) => {\r\n                if(country.country === newSearchText){\r\n                    setCurrentCountry(country);\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    const smallScreen = React.useContext(ScreenContext);\r\n\r\n    const wrapper = {\r\n        width: '100%',\r\n        height: '100%',\r\n        display: smallScreen ? 'block' : 'flex',\r\n        flexDirection: smallScreen ? null :'row',\r\n    }\r\n\r\n    const searchbar = {\r\n        width: '100%',\r\n        height: '8%',\r\n        // border: '1px solid red',\r\n    }\r\n\r\n    const styles = {\r\n        width: '100%',\r\n     };\r\n\r\n    const flags = {\r\n        height: smallScreen ? '67%' : '70%',\r\n        width: '100%',\r\n        marginTop: smallScreen ? 15 : null,\r\n    }\r\n\r\n    const worldContainer = {\r\n        height: '100%',\r\n        width: '70%',\r\n        // border: '1px solid red',\r\n    }\r\n\r\n    const worldData = {\r\n        height: smallScreen ? '20%' : '30%',\r\n        width: '100%',\r\n        // border: '1px solid red',\r\n    }\r\n\r\n    const search = {\r\n        // border: '2px solid blue',\r\n        height: '100%',\r\n        width: '30%',\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={wrapper}>\r\n                {\r\n                    smallScreen ?\r\n                    <>\r\n                    <div\r\n                    style={searchbar}\r\n                    >\r\n                        <InputGroup inside style={styles}>\r\n                        <Input \r\n                        placeholder=\"Search by country name eg Kenya\"\r\n                        value={searchText}\r\n                        onChange={value => searchForCountry(value)}\r\n                        onFocus={() => setShowSearch(true)}\r\n                        />\r\n                        <InputGroup.Button>\r\n                            <Icon icon=\"search\" />\r\n                        </InputGroup.Button>\r\n                        </InputGroup>\r\n                    </div>\r\n                    {\r\n                        showSearch ? \r\n                        <>\r\n                        <SearchCountry\r\n                        countriesState={props.countriesState}\r\n                        currentCountry={currentCountry}\r\n                        setCurrentCountry={setCurrentCountry}\r\n                        searchText={searchText}\r\n                        setSearchText={setSearchText}\r\n                        setShowSearch={setShowSearch}\r\n                        />\r\n                        </> : \r\n                        <>\r\n                        <div\r\n                        style={worldData}\r\n                        >\r\n                            <WorldInfo />\r\n                        </div>\r\n                        <div\r\n                        style={flags}\r\n                        >\r\n                            <WorldScreen\r\n                            countriesState={props.countriesState}\r\n                            />\r\n                        </div>\r\n                        </>\r\n                    }\r\n                    </>:\r\n                    <>\r\n                        <div\r\n                        style={worldContainer}\r\n                        >\r\n                            <div\r\n                            style={worldData}\r\n                            >\r\n                                <WorldInfo />\r\n                            </div>\r\n                            <div\r\n                            style={flags}\r\n                            >\r\n                                <WorldScreen\r\n                                countriesState={props.countriesState}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div\r\n                        style={search}\r\n                        >\r\n                            <SearchCountry\r\n                            countriesState={props.countriesState}\r\n                            currentCountry={currentCountry}\r\n                            setCurrentCountry={setCurrentCountry}\r\n                            searchText={searchText}\r\n                            setSearchText={setSearchText}\r\n                            setShowSearch={setShowSearch}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(React.memo(Home));\r\n","import {\r\n    FETCH_COUNTRIES_ERROR,\r\n    FETCH_COUNTRIES_REQUEST,\r\n    FETCH_COUNTRIES_SUCCESS,\r\n} from './countriesTypes';\r\nimport axios from 'axios';\r\n\r\nexport const fetchCountriesRequest = () => {\r\n    return({\r\n        type: FETCH_COUNTRIES_REQUEST,\r\n    });\r\n}\r\n\r\nexport const fetchCountriesSuccess = countriesData => {\r\n    return({\r\n        type: FETCH_COUNTRIES_SUCCESS,\r\n        payload: countriesData.data,\r\n    });\r\n}\r\n\r\nexport const fetchCountriesError = error => {\r\n    return({\r\n        type: FETCH_COUNTRIES_ERROR,\r\n        payload: error,\r\n    });\r\n}\r\n\r\nexport const fetchCountries = () => {\r\n    return (\r\n        (dispatch) => {\r\n            dispatch(fetchCountriesRequest());\r\n            axios\r\n            .get(`https://corona.lmao.ninja/v2/countries?sort=country`)\r\n            .then(response => {\r\n                dispatch(fetchCountriesSuccess(response));\r\n            })\r\n            .catch( error => {\r\n                dispatch(fetchCountriesError(error));\r\n            })\r\n            .finally();\r\n        }\r\n    );\r\n}","export const FETCH_COUNTRIES_REQUEST = 'FETCH_COUNTRIES_REQUEST';\r\nexport const FETCH_COUNTRIES_SUCCESS = 'FETCH_COUNTRIES_SUCCESS';\r\nexport const FETCH_COUNTRIES_ERROR = 'FETCH_COUNTRIES_ERROR';","import React, {\r\n    useEffect,\r\n} from 'react';\r\nimport { useCountUp } from 'react-countup';\r\nimport { ScreenContext } from './App';\r\n\r\n\r\nconst CountryData = ({caption, figure}) => {\r\n    const smallScreen = React.useContext(ScreenContext);\r\n    const { countUp, start, pauseResume, reset, update } = useCountUp({\r\n        end: figure,\r\n        duration: 5,\r\n        startOnMount: true,\r\n      });\r\n\r\n    useEffect(() => {\r\n        update(figure);\r\n    }, [figure]);\r\n\r\n    const container = {\r\n        width: '33.33%',\r\n        height: '33.33%',\r\n        overflow: 'auto',\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div\r\n            style={container}\r\n            >\r\n                <h3 \r\n                style={{\r\n                    fontWeight: 'bolder',\r\n                    fontSize: smallScreen ? '1em' : null,\r\n                }}\r\n                >\r\n                    {caption } : {smallScreen && <br/>} {countUp}\r\n                </h3>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(CountryData);\r\n","import React, {\r\n    useEffect,\r\n    useRef,\r\n} from 'react';\r\nimport {\r\n    Button,\r\n    Loader,\r\n} from 'rsuite';\r\nimport {\r\n    Link,\r\n} from 'react-router-dom';\r\nimport {\r\n    connect\r\n} from 'react-redux';\r\nimport {\r\n    fetchCountry\r\n} from '../redux';\r\nimport SingleData from './CountryData';\r\nimport { ScreenContext } from './App';\r\n\r\nconst mapStateToProps = state => {\r\n    return({\r\n        countryState: state.country,\r\n    });\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return({\r\n        fetchCountry: () => dispatch(fetchCountry(ownProps.match.params.country)),\r\n    });\r\n};\r\n\r\nconst Country = ({match, countryState, fetchCountry}) => {\r\n    const smallScreen = React.useContext(ScreenContext);\r\n\r\n    //a ref variable to ensure we do not set interval multiple times\r\n    const updateReference = useRef();\r\n\r\n    useEffect(() => {\r\n        fetchCountry();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // console.log(\"country state: \", countryState);\r\n        if(!updateReference.current){\r\n            updateReference.current = setInterval(() => {\r\n                fetchCountry();\r\n            }, 120000);\r\n        }\r\n        \r\n        return(() => {\r\n            if(updateReference.current) clearInterval(updateReference.current)\r\n        });\r\n    }, [countryState]);\r\n\r\n    const container = {\r\n        width: '100%',\r\n        height: '100%',\r\n    }\r\n    \r\n    const title = {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        height: '40%',\r\n    }\r\n    \r\n    const body = {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        flexWrap: 'wrap',\r\n        width: '100%',\r\n        height: '45%',\r\n        marginTop: '10px',\r\n        marginBottom: '5px',\r\n    }\r\n    \r\n    const titleContent = {\r\n        textAlign: 'center',\r\n        width: '100%',\r\n        height: '25%',\r\n        fontSize: smallScreen ? '1em' : null,\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <div\r\n            style={container}\r\n            >\r\n                {\r\n                    countryState.isLoading ? \r\n                    <>\r\n                    <div style={{width: '100%', height: '100%'}}>\r\n                    <Loader backdrop size=\"lg\" center/>\r\n                    </div>\r\n                    </> :\r\n                    countryState.error !== `` ?\r\n                    countryState.error :\r\n                    <>\r\n                        <div\r\n                        style={title}\r\n                        >\r\n                        {\r\n                            countryState.countryData.country && \r\n                            <>\r\n                            <img \r\n                            src={countryState.countryData.countryInfo.flag}\r\n                            alt={`${countryState.countryData.country}'s flag`} \r\n                            style={{\r\n                                width: smallScreen ? '60%' : '30%',\r\n                                height: '100%',\r\n                            }}\r\n                            />\r\n                            <div\r\n                            style={{\r\n                                width: smallScreen ? '40%' : '70%',\r\n                                height: '100%',\r\n                            }}\r\n                            >\r\n                                <h3 style={titleContent}>{countryState.countryData.country}</h3>\r\n                                <h3 style={titleContent}>ISO 3: {countryState.countryData.countryInfo.iso3}</h3>\r\n                                <h3 style={titleContent}>Latitude: {countryState.countryData.countryInfo.lat}</h3>\r\n                                <h3 style={titleContent}>Longitude: {countryState.countryData.countryInfo.long}</h3>\r\n                            </div>\r\n                            </>\r\n                        }\r\n                        </div>\r\n                        <hr />\r\n                        <div\r\n                        style={body}\r\n                        >\r\n                        \r\n                        <SingleData \r\n                        caption=\"Total Cases\"\r\n                        figure={countryState.countryData.cases}\r\n                        />\r\n                        <SingleData \r\n                        caption=\"Cases Today\"\r\n                        figure={countryState.countryData.todayCases}\r\n                        />\r\n                        <SingleData \r\n                        caption=\"Total Deaths\"\r\n                        figure={countryState.countryData.deaths}\r\n                        />\r\n                        <SingleData \r\n                        caption=\"Deaths Today\"\r\n                        figure={countryState.countryData.todayDeaths}\r\n                        />\r\n                        <SingleData \r\n                        caption=\"Active\"\r\n                        figure={countryState.countryData.active}\r\n                        />\r\n                        <SingleData \r\n                        caption=\"Recovered\"\r\n                        figure={countryState.countryData.recovered}\r\n                        />\r\n                        <SingleData \r\n                        caption={smallScreen ? \"CPM\" : \"Cases Per One Million\"}\r\n                        figure={countryState.countryData.casesPerOneMillion}\r\n                        />\r\n                        <SingleData \r\n                        caption={smallScreen ? \"DPM\" : \"Deaths Per One Million\"}\r\n                        figure={countryState.countryData.deathsPerOneMillion}\r\n                        />\r\n                        <SingleData \r\n                        caption=\"Total Tests\"\r\n                        figure={countryState.countryData.tests}\r\n                        />\r\n                        </div>\r\n                    </>\r\n                }\r\n                <Link \r\n                to=\"/covid-live\"\r\n                style={{\r\n                    position: 'absolute',\r\n                    bottom: 0,\r\n                    width: '100%',\r\n                }}\r\n                >\r\n                <Button\r\n                style={{\r\n                    width: '100%',\r\n                    borderRadius: 0,\r\n                }}\r\n                appearance=\"primary\"\r\n                >\r\n                    Go Back Home\r\n                </Button>\r\n                </Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(React.memo(Country));\r\n","import {\r\n    FETCH_COUNTRY_ERROR,\r\n    FETCH_COUNTRY_REQUEST,\r\n    FETCH_COUNTRY_SUCCESS,\r\n} from './countryTypes';\r\nimport axios from 'axios';\r\n\r\nexport const fetchCountryRequest = () => {\r\n    return({\r\n        type: FETCH_COUNTRY_REQUEST,\r\n    });\r\n}\r\n\r\nexport const fetchCountrySuccess = countryData => {\r\n    return({\r\n        type: FETCH_COUNTRY_SUCCESS,\r\n        payload: countryData.data,\r\n    });\r\n}\r\n\r\nexport const fetchCountryError = error => {\r\n    return({\r\n        type: FETCH_COUNTRY_ERROR,\r\n        payload: error,\r\n    });\r\n}\r\n\r\nexport const fetchCountry = country => {\r\n    return (\r\n        (dispatch) => {\r\n            dispatch(fetchCountryRequest());\r\n            axios\r\n            .get(`https://corona.lmao.ninja/v2/countries/${country}`)\r\n            .then(response => {\r\n                dispatch(fetchCountrySuccess(response));\r\n            })\r\n            .catch( error => {\r\n                dispatch(fetchCountryError(error));\r\n            })\r\n            .finally();\r\n        }\r\n    );\r\n}","export const FETCH_COUNTRY_REQUEST = 'FETCH_COUNTRY_REQUEST';\r\nexport const FETCH_COUNTRY_SUCCESS = 'FETCH_COUNTRY_SUCCESS';\r\nexport const FETCH_COUNTRY_ERROR = 'FETCH_COUNTRY_ERROR';","import {\r\n    FETCH_WORLDDATA_ERROR,\r\n    FETCH_WORLDDATA_REQUEST,\r\n    FETCH_WORLDDATA_SUCCESS,\r\n} from './worldTypes';\r\n\r\nconst initialWorldState = {\r\n    isLoading: false,\r\n    worldData: {},\r\n    error: ``,\r\n}\r\n\r\nconst worldReducer = (state = initialWorldState, action) => {\r\n    switch(action.type){\r\n        case FETCH_WORLDDATA_REQUEST:\r\n            return ({\r\n                ...state,\r\n                isLoading: true,\r\n            });\r\n        case FETCH_WORLDDATA_SUCCESS: \r\n            return ({\r\n                ...state,\r\n                isLoading: false,\r\n                worldData: action.payload,\r\n                error: ``,\r\n            });\r\n        case FETCH_WORLDDATA_ERROR:\r\n            return({\r\n                ...state,\r\n                isLoading: false,\r\n                worldData: {},\r\n                error: action.payload,\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default worldReducer;","import {\r\n    FETCH_COUNTRIES_ERROR,\r\n    FETCH_COUNTRIES_REQUEST,\r\n    FETCH_COUNTRIES_SUCCESS,\r\n} from './countriesTypes';\r\n\r\nconst initialCountriesState = {\r\n    isLoading: false,\r\n    countriesData: [],\r\n    error: ``,\r\n}\r\n\r\nconst countriesReducer = (state = initialCountriesState, action) => {\r\n    switch(action.type){\r\n        case FETCH_COUNTRIES_REQUEST:\r\n            return ({\r\n                ...state,\r\n                isLoading: true,\r\n            });\r\n        case FETCH_COUNTRIES_SUCCESS: \r\n            return ({\r\n                ...state,\r\n                isLoading: false,\r\n                countriesData: action.payload,\r\n                error: ``,\r\n            });\r\n        case FETCH_COUNTRIES_ERROR:\r\n            return({\r\n                ...state,\r\n                isLoading: false,\r\n                countriesData: [],\r\n                error: action.payload,\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default countriesReducer;","import {\r\n    FETCH_COUNTRY_ERROR,\r\n    FETCH_COUNTRY_REQUEST,\r\n    FETCH_COUNTRY_SUCCESS,\r\n} from './countryTypes';\r\n\r\nconst initialCountryState = {\r\n    isLoading: false,\r\n    countryData: {},\r\n    error: ``,\r\n}\r\n\r\nconst countryReducer = (state = initialCountryState, action) => {\r\n    switch(action.type){\r\n        case FETCH_COUNTRY_REQUEST:\r\n            return ({\r\n                ...state,\r\n                isLoading: true,\r\n            });\r\n        case FETCH_COUNTRY_SUCCESS: \r\n            return ({\r\n                ...state,\r\n                isLoading: false,\r\n                countryData: action.payload,\r\n                error: ``,\r\n            });\r\n        case FETCH_COUNTRY_ERROR:\r\n            return({\r\n                ...state,\r\n                isLoading: false,\r\n                countryData: {},\r\n                error: action.payload,\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default countryReducer;","import { combineReducers } from 'redux';\r\nimport  worldReducer from './world/worldReducer';\r\nimport countriesReducer from './countries/countriesReducer';\r\nimport countryReducer from './country/countryReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    world: worldReducer,\r\n    countries: countriesReducer,\r\n    country: countryReducer,\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport rootReducer from './rootReducer';\r\n\r\nconst thunkMiddleware = require('redux-thunk').default;\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\r\nimport {\r\n    Container,\r\n    Header,\r\n    Content,\r\n} from 'rsuite';\r\nimport Title from './Title';\r\nimport Home from './Home';\r\nimport Country from './Country';\r\nimport { Provider } from 'react-redux';\r\nimport store from '../redux/store';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Route,\r\n    Switch,\r\n} from 'react-router-dom'\r\n\r\nconst judgeScreenSize = (width, height) => {\r\n    if(width > 910 && height > 700) return false;\r\n    return true;\r\n}\r\n\r\nexport const ScreenContext = React.createContext();\r\nconst App = () => {\r\n    //state varables used to track responsiveness\r\n    const [width, setWidth] = React.useState(window.innerWidth - 20);\r\n    const [height, setHeight] = React.useState(window.innerHeight - 20);\r\n    const [smallScreen, setSmallScreen] = React.useState(() => judgeScreenSize(width, height));\r\n\r\n    const handleResize = () => {\r\n        setWidth(window.innerWidth - 20);\r\n        setHeight(window.innerHeight - 20);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        window.addEventListener('resize', handleResize);\r\n        return(() => {\r\n            window.removeEventListener('resize', handleResize);\r\n        })\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        setSmallScreen(judgeScreenSize(width, height));\r\n    }, [width, height])\r\n\r\n    const container = {\r\n        // border: '2px solid blue',\r\n        height: '100%',\r\n    }\r\n    \r\n    const header = {\r\n        // border: '2px solid red',\r\n        height: '15%'\r\n    }\r\n    \r\n    const content = {\r\n        // border: '2px solid green',\r\n        height: '75%',\r\n    }\r\n\r\n    // console.log(\"small screen: \", smallScreen);\r\n    return (\r\n        <>\r\n            <ScreenContext.Provider value={smallScreen}>\r\n            <Router>\r\n            <Provider store={store}>\r\n            <Container\r\n            style={container}\r\n            >\r\n            <Header\r\n            style={header}\r\n            >\r\n                <Title />\r\n            </Header>\r\n            <Content\r\n            style={content}\r\n            >\r\n                <Switch>\r\n                    <Route path=\"/covid-live\" exact render={(props) => <Home {...props}/>}/>\r\n                    <Route path=\"/covid-live/:country\" exact render={(props) => <Country {...props}/>}/>\r\n                </Switch>\r\n            </Content>\r\n            </Container>\r\n            </Provider>\r\n            </Router>\r\n            </ScreenContext.Provider>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'rsuite/dist/styles/rsuite-default.css';\r\nimport App from './components/App';\r\n\r\nconst rootNode = document.querySelector(\"#root\");\r\nReactDOM.render(\r\n    <><App /></>, rootNode\r\n)"],"sourceRoot":""}